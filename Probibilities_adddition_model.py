#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 24 12:34:57 2019

@author: divyarth
"""

# -*- coding: utf-8 -*-
"""ASSIGNEMENT3_DIVY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hnOA2FMEnWNCO874DrwJXZMQsFVlJtfz
"""
import sys

import numpy as np
import scipy as sp
import pandas as pd
from numpy.random import seed


from tensorflow import set_random_seed
seed(1)
set_random_seed(1)

from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())



sys.argv=['','train.csv','test.csv','output.txt']
data = pd.read_csv(sys.argv[1],header=None,delimiter=' ').values

X_train=data[:,:-2]
y1=data[:,-1]
y2=data[:,-2]
X_train = X_train.reshape(len(X_train),3,32,32).transpose([0,2, 3, 1])/255


data1 = pd.read_csv(sys.argv[2],header=None,delimiter=' ').values
X_test=data1[:,:-2]
X_test = X_test.reshape(len(X_test),3,32,32).transpose([0,2, 3, 1])/255


from keras.utils import to_categorical
y_train = to_categorical(y1)
from keras.models import Model
from keras.layers import Conv2D, MaxPooling2D, Dense, Input, Activation, Dropout, GlobalAveragePooling2D,\
    BatchNormalization, concatenate, AveragePooling2D
from keras.optimizers import Adam
import matplotlib.pyplot as plt
from keras.callbacks import ModelCheckpoint
from keras.models import Sequential
from keras.callbacks import EarlyStopping

def make_model():
  model = Sequential()
  
  model.add(Conv2D(128,(3,3),activation='elu',input_shape=(32,32,3),padding='same'))
  model.add(BatchNormalization())
  model.add(Conv2D(128,(1,1),activation='elu',padding='same'))
  model.add(Conv2D(128,(3,3),activation='elu'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.1))
  model.add(BatchNormalization())

  model.add(Conv2D(256,(3,3),activation='elu',padding='same'))
  model.add(BatchNormalization())
  model.add(Conv2D(256,(1,1),activation='elu',padding='same'))
  model.add(Conv2D(256,(3,3),activation='elu'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.25))
  model.add(BatchNormalization())

  model.add(Conv2D(512,(3,3),activation='elu',padding='same'))
  model.add(BatchNormalization()) 
  model.add(Conv2D(512,(1,1),activation='elu',padding='same'))
  model.add(Conv2D(512,(3,3),activation='elu'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.5))
  model.add(BatchNormalization())

  model.add(GlobalAveragePooling2D())

  model.add(Dense(1024,activation='elu'))
  model.add(Dropout(0.50))
  model.add(BatchNormalization())

  model.add(Dense(100,activation='softmax'))
  return model


def make_model2():
  
  model = Sequential()

  model.add(Conv2D(64,(3,3),activation='relu',input_shape=(32,32,3),padding='same'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.30))
  model.add(BatchNormalization())

  model.add(Conv2D(128,(3,3),activation='relu',padding='same'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.30))
  model.add(BatchNormalization())

  model.add(Conv2D(256,(3,3),activation='relu',padding='same'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.30))
  model.add(BatchNormalization())

  model.add(GlobalAveragePooling2D())

  model.add(Dense(512,use_bias=True,activation='relu'))
  model.add(Dropout(0.50))
  model.add(BatchNormalization())

  model.add(Dense(256,use_bias=True,activation='relu'))
  model.add(Dropout(0.50))
  model.add(BatchNormalization())

  model.add(Dense(100,activation='softmax'))
  return model

def make_model3():
  model = Sequential()
  
  model.add(Conv2D(128,(3,3),activation='relu',input_shape=(32,32,3),padding='same'))
  model.add(Conv2D(128,(3,3),activation='relu'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.1))
  
  model.add(Conv2D(256,(3,3),activation='relu',padding='same'))
  model.add(Conv2D(256,(1,1),activation='relu',padding='same'))
  model.add(Conv2D(256,(3,3),activation='relu'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.1))

  model.add(Conv2D(512,(3,3),activation='relu',padding='same'))
  model.add(Conv2D(512,(3,3),activation='relu'))
  model.add(MaxPooling2D((2, 2)))
  model.add(Dropout(0.3))

  model.add(GlobalAveragePooling2D())

  model.add(Dense(1024,activation='relu'))
  model.add(Dropout(0.50))
  model.add(BatchNormalization())

  model.add(Dense(100,activation='softmax'))
  return model

from keras.callbacks import EarlyStopping
es=EarlyStopping(monitor='val_loss', min_delta=0, patience=20, verbose=0, mode='auto', baseline=None, restore_best_weights=True)
from keras.utils import to_categorical

y_train = to_categorical(y1)
md1=make_model()
md1.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])
es=EarlyStopping(monitor='val_loss', min_delta=0, patience=20, verbose=0, mode='auto', baseline=None, restore_best_weights=True)
history1 = md1.fit(X_train, y_train, validation_split =0.1, epochs=20, batch_size=1000,callbacks=[es])

md2=make_model2()
md2.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])
es=EarlyStopping(monitor='val_loss', min_delta=0, patience=20, verbose=0, mode='auto', baseline=None, restore_best_weights=True)
history2 = md2.fit(X_train, y_train, validation_split =0.1, epochs=60, batch_size=1000,callbacks=[es])

md3=make_model3()
md3.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])
es=EarlyStopping(monitor='val_loss', min_delta=0, patience=20, verbose=0, mode='auto', baseline=None, restore_best_weights=True)
history3 = md3.fit(X_train, y_train, validation_split =0.1, epochs=30, batch_size=1000,callbacks=[es])

y_p1 = md1.predict(X_test)

y_p2 = md2.predict(X_test)

y_p3=md3.predict(X_test)

y_test=(6*y_p1+5*y_p2+4.5*y_p3).argmax(axis=1)

np.savetxt(sys.argv[3],y_test,delimiter='\n')
